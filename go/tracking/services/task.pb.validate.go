// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: tracking/services/task.proto

package services

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on TaskServiceGetSingleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TaskServiceGetSingleRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return TaskServiceGetSingleRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// TaskServiceGetSingleRequestValidationError is the validation error returned
// by TaskServiceGetSingleRequest.Validate if the designated constraints
// aren't met.
type TaskServiceGetSingleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskServiceGetSingleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskServiceGetSingleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskServiceGetSingleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskServiceGetSingleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskServiceGetSingleRequestValidationError) ErrorName() string {
	return "TaskServiceGetSingleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TaskServiceGetSingleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskServiceGetSingleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskServiceGetSingleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskServiceGetSingleRequestValidationError{}

// Validate checks the field values on TaskServiceGetSingleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TaskServiceGetSingleResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskServiceGetSingleResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TaskServiceGetSingleResponseValidationError is the validation error returned
// by TaskServiceGetSingleResponse.Validate if the designated constraints
// aren't met.
type TaskServiceGetSingleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskServiceGetSingleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskServiceGetSingleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskServiceGetSingleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskServiceGetSingleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskServiceGetSingleResponseValidationError) ErrorName() string {
	return "TaskServiceGetSingleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TaskServiceGetSingleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskServiceGetSingleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskServiceGetSingleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskServiceGetSingleResponseValidationError{}

// Validate checks the field values on TaskServiceGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TaskServiceGetRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetIds()) < 1 {
		return TaskServiceGetRequestValidationError{
			field:  "Ids",
			reason: "value must contain at least 1 item(s)",
		}
	}

	if m.GetPage() <= 0 {
		return TaskServiceGetRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
	}

	if m.GetLimit() <= 0 {
		return TaskServiceGetRequestValidationError{
			field:  "Limit",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// TaskServiceGetRequestValidationError is the validation error returned by
// TaskServiceGetRequest.Validate if the designated constraints aren't met.
type TaskServiceGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskServiceGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskServiceGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskServiceGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskServiceGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskServiceGetRequestValidationError) ErrorName() string {
	return "TaskServiceGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TaskServiceGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskServiceGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskServiceGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskServiceGetRequestValidationError{}

// Validate checks the field values on TaskServiceGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TaskServiceGetResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TaskServiceGetResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// TaskServiceGetResponseValidationError is the validation error returned by
// TaskServiceGetResponse.Validate if the designated constraints aren't met.
type TaskServiceGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskServiceGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskServiceGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskServiceGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskServiceGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskServiceGetResponseValidationError) ErrorName() string {
	return "TaskServiceGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TaskServiceGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskServiceGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskServiceGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskServiceGetResponseValidationError{}

// Validate checks the field values on TaskServiceCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TaskServiceCreateRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskServiceCreateRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TaskServiceCreateRequestValidationError is the validation error returned by
// TaskServiceCreateRequest.Validate if the designated constraints aren't met.
type TaskServiceCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskServiceCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskServiceCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskServiceCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskServiceCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskServiceCreateRequestValidationError) ErrorName() string {
	return "TaskServiceCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TaskServiceCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskServiceCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskServiceCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskServiceCreateRequestValidationError{}

// Validate checks the field values on TaskServiceCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TaskServiceCreateResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskServiceCreateResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TaskServiceCreateResponseValidationError is the validation error returned by
// TaskServiceCreateResponse.Validate if the designated constraints aren't met.
type TaskServiceCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskServiceCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskServiceCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskServiceCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskServiceCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskServiceCreateResponseValidationError) ErrorName() string {
	return "TaskServiceCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TaskServiceCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskServiceCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskServiceCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskServiceCreateResponseValidationError{}
