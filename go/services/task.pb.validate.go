// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: services/task.proto

package services

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on SingleTaskRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SingleTaskRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return SingleTaskRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// SingleTaskRequestValidationError is the validation error returned by
// SingleTaskRequest.Validate if the designated constraints aren't met.
type SingleTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SingleTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SingleTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SingleTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SingleTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SingleTaskRequestValidationError) ErrorName() string {
	return "SingleTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SingleTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSingleTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SingleTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SingleTaskRequestValidationError{}

// Validate checks the field values on SingleTaskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SingleTaskResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SingleTaskResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SingleTaskResponseValidationError is the validation error returned by
// SingleTaskResponse.Validate if the designated constraints aren't met.
type SingleTaskResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SingleTaskResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SingleTaskResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SingleTaskResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SingleTaskResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SingleTaskResponseValidationError) ErrorName() string {
	return "SingleTaskResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SingleTaskResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSingleTaskResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SingleTaskResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SingleTaskResponseValidationError{}

// Validate checks the field values on TaskListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TaskListRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetIds()) < 1 {
		return TaskListRequestValidationError{
			field:  "Ids",
			reason: "value must contain at least 1 item(s)",
		}
	}

	if m.GetPage() <= 0 {
		return TaskListRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
	}

	if m.GetLimit() <= 0 {
		return TaskListRequestValidationError{
			field:  "Limit",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// TaskListRequestValidationError is the validation error returned by
// TaskListRequest.Validate if the designated constraints aren't met.
type TaskListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskListRequestValidationError) ErrorName() string { return "TaskListRequestValidationError" }

// Error satisfies the builtin error interface
func (e TaskListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskListRequestValidationError{}

// Validate checks the field values on TaskListResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TaskListResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TaskListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// TaskListResponseValidationError is the validation error returned by
// TaskListResponse.Validate if the designated constraints aren't met.
type TaskListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskListResponseValidationError) ErrorName() string { return "TaskListResponseValidationError" }

// Error satisfies the builtin error interface
func (e TaskListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskListResponseValidationError{}

// Validate checks the field values on TaskCreateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TaskCreateRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskCreateRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TaskCreateRequestValidationError is the validation error returned by
// TaskCreateRequest.Validate if the designated constraints aren't met.
type TaskCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskCreateRequestValidationError) ErrorName() string {
	return "TaskCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TaskCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskCreateRequestValidationError{}

// Validate checks the field values on TaskCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TaskCreateResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskCreateResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TaskCreateResponseValidationError is the validation error returned by
// TaskCreateResponse.Validate if the designated constraints aren't met.
type TaskCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskCreateResponseValidationError) ErrorName() string {
	return "TaskCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TaskCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskCreateResponseValidationError{}
